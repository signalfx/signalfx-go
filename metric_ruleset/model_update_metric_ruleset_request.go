/*
Metric Ruleset API

Metric ruleset API 

API version: 3.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metric_ruleset

import (
	"encoding/json"
)

// UpdateMetricRulesetRequest Update metric ruleset request body 
type UpdateMetricRulesetRequest struct {
	// Aggregation rules in the ruleset 
	AggregationRules []AggregationRule `json:"aggregationRules,omitempty"`
	// List of exception rules. Exception rules reroute a metric time series (MTS) from an archival route to a real-time route if the MTS contains values that match those of a specified filter. 
	ExceptionRules []ExceptionRule `json:"exceptionRules,omitempty"`
	// Name of the metric 
	MetricName *string `json:"metricName,omitempty"`
	// Information about an aggregation rule. 
	Description *string `json:"description,omitempty"`
	RoutingRule *RoutingRule `json:"routingRule,omitempty"`
	// Version of the ruleset 
	Version *int64 `json:"version,omitempty"`
}

// NewUpdateMetricRulesetRequest instantiates a new UpdateMetricRulesetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMetricRulesetRequest() *UpdateMetricRulesetRequest {
	this := UpdateMetricRulesetRequest{}
	return &this
}

// NewUpdateMetricRulesetRequestWithDefaults instantiates a new UpdateMetricRulesetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMetricRulesetRequestWithDefaults() *UpdateMetricRulesetRequest {
	this := UpdateMetricRulesetRequest{}
	return &this
}

// GetAggregationRules returns the AggregationRules field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetAggregationRules() []AggregationRule {
	if o == nil || isNil(o.AggregationRules) {
		var ret []AggregationRule
		return ret
	}
	return o.AggregationRules
}

// GetAggregationRulesOk returns a tuple with the AggregationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetAggregationRulesOk() ([]AggregationRule, bool) {
	if o == nil || isNil(o.AggregationRules) {
    return nil, false
	}
	return o.AggregationRules, true
}

// HasAggregationRules returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasAggregationRules() bool {
	if o != nil && !isNil(o.AggregationRules) {
		return true
	}

	return false
}

// SetAggregationRules gets a reference to the given []AggregationRule and assigns it to the AggregationRules field.
func (o *UpdateMetricRulesetRequest) SetAggregationRules(v []AggregationRule) {
	o.AggregationRules = v
}

// GetExceptionRules returns the ExceptionRules field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetExceptionRules() []ExceptionRule {
        if o == nil || isNil(o.ExceptionRules) {
                var ret []ExceptionRule
                return ret
        }
        return o.ExceptionRules
}

// GetExceptionRulesOk returns a tuple with the ExceptionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetExceptionRulesOk() ([]ExceptionRule, bool) {
        if o == nil || isNil(o.ExceptionRules) {
    return nil, false
        }
        return o.ExceptionRules, true
}

// HasExceptionRules returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasExceptionRules() bool {
        if o != nil && !isNil(o.ExceptionRules) {
                return true
        }

        return false
}

// SetExceptionRules gets a reference to the given []ExceptionRule and assigns it to the ExceptionRules field.
func (o *UpdateMetricRulesetRequest) SetExceptionRules(v []ExceptionRule) {
        o.ExceptionRules = v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetMetricName() string {
	if o == nil || isNil(o.MetricName) {
		var ret string
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetMetricNameOk() (*string, bool) {
	if o == nil || isNil(o.MetricName) {
    return nil, false
	}
	return o.MetricName, true
}

// HasMetricName returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasMetricName() bool {
	if o != nil && !isNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given string and assigns it to the MetricName field.
func (o *UpdateMetricRulesetRequest) SetMetricName(v string) {
	o.MetricName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateMetricRulesetRequest) SetDescription(v string) {
	o.Description = &v
}

// GetRoutingRule returns the RoutingRule field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetRoutingRule() RoutingRule {
	if o == nil || isNil(o.RoutingRule) {
		var ret RoutingRule
		return ret
	}
	return *o.RoutingRule
}

// GetRoutingRuleOk returns a tuple with the RoutingRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetRoutingRuleOk() (*RoutingRule, bool) {
	if o == nil || isNil(o.RoutingRule) {
    return nil, false
	}
	return o.RoutingRule, true
}

// HasRoutingRule returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasRoutingRule() bool {
	if o != nil && !isNil(o.RoutingRule) {
		return true
	}

	return false
}

// SetRoutingRule gets a reference to the given RoutingRule and assigns it to the RoutingRule field.
func (o *UpdateMetricRulesetRequest) SetRoutingRule(v RoutingRule) {
	o.RoutingRule = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdateMetricRulesetRequest) GetVersion() int64 {
	if o == nil || isNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMetricRulesetRequest) GetVersionOk() (*int64, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdateMetricRulesetRequest) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *UpdateMetricRulesetRequest) SetVersion(v int64) {
	o.Version = &v
}

func (o UpdateMetricRulesetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AggregationRules) {
		toSerialize["aggregationRules"] = o.AggregationRules
	}
	if !isNil(o.ExceptionRules) {
		toSerialize["exceptionRules"] = o.ExceptionRules
	}
	if !isNil(o.MetricName) {
		toSerialize["metricName"] = o.MetricName
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.RoutingRule) {
		toSerialize["routingRule"] = o.RoutingRule
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateMetricRulesetRequest struct {
	value *UpdateMetricRulesetRequest
	isSet bool
}

func (v NullableUpdateMetricRulesetRequest) Get() *UpdateMetricRulesetRequest {
	return v.value
}

func (v *NullableUpdateMetricRulesetRequest) Set(val *UpdateMetricRulesetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMetricRulesetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMetricRulesetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMetricRulesetRequest(val *UpdateMetricRulesetRequest) *NullableUpdateMetricRulesetRequest {
	return &NullableUpdateMetricRulesetRequest{value: val, isSet: true}
}

func (v NullableUpdateMetricRulesetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMetricRulesetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


