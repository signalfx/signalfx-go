/*
APM service topology API

APIs to retrieve the upstream and downstream dependencies for a given service, as well as to retrieve the complete graph-based topology of all services in a given environment and time window. You can also use tagFilters to filter this topology by indexed span tags.  To learn about example use cases for this API, see [Retrieve service topology](https://dev.splunk.com/observability/docs/apm/service-topology/) in the developer guide.    ## Requirements  * You must have an organization access token with the API permission or a session token to use the API. * You have to have the Splunk Observability Cloud admin, power, or read_only role to use the APM Service Topology endpoints. 

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EqualsTagFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EqualsTagFilter{}

// EqualsTagFilter Map of properties for an individual tag filter, in the form of a JSON object.   **Note**: The `operator` you include in `tagFilter` dictates whether to include the `value` or `values` field. When you provide the `equals` operator, you must include a single value as a string in the `value` field. When you provide the `in` operator, you must include a list of values as strings in the `values` field.   
type EqualsTagFilter struct {
	// Name of span tag on which to filter.   In your tag filter(s), you can specify indexed tags, which are either pre-configured indexed tags or custom indexed tags. Supported pre-configured indexed tags in APM include \"sf_service\", \"sf_environment\", \"sf_httpMethod\", and \"sf_kind\".  Search is case-insensitive.   If you do not provide a filter on the tag \"sf_environment\", the API returns services in all environments.  
	Name string `json:"name"`
	// Scope of spans on which to filter, in the form of an enumerated string. The API accepts the following values:    * GLOBAL: Matches the first occurrence in all spans   * TIER: Matches the first occurrence in service-tier spans   * INCOMING: Matches the value on the incoming edge span of service tier spans   * SPAN: Matches the tag on each span within the trace  This is a mandatory field.  
	Scope string `json:"scope"`
	// Operator to apply in the filter. This is a mandatory field, and the two accepted values are `equals` and `in`. When you use the `equals` operator, you must use the `value` parameter and provide a single value as a string. When you use the `in` operator, you must use the `values` parameter and provide the values as strings in a JSON array.  
	Operator string `json:"operator"`
	// When you use the `equals` operator, `value` is the value to compare to the provided span tag value. Search is case-sensitive.   If the `tagName` you specified is `sf_environment`, `value` must be a valid environment name. 
	Value string `json:"value"`
}

type _EqualsTagFilter EqualsTagFilter

// NewEqualsTagFilter instantiates a new EqualsTagFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqualsTagFilter(name string, scope string, operator string, value string) *EqualsTagFilter {
	this := EqualsTagFilter{}
	this.Name = name
	this.Scope = scope
	this.Operator = operator
	this.Value = value
	return &this
}

// NewEqualsTagFilterWithDefaults instantiates a new EqualsTagFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualsTagFilterWithDefaults() *EqualsTagFilter {
	this := EqualsTagFilter{}
	var scope string = "GLOBAL"
	this.Scope = scope
	return &this
}

// GetName returns the Name field value
func (o *EqualsTagFilter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EqualsTagFilter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EqualsTagFilter) SetName(v string) {
	o.Name = v
}

// GetScope returns the Scope field value
func (o *EqualsTagFilter) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *EqualsTagFilter) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *EqualsTagFilter) SetScope(v string) {
	o.Scope = v
}

// GetOperator returns the Operator field value
func (o *EqualsTagFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *EqualsTagFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *EqualsTagFilter) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *EqualsTagFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EqualsTagFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EqualsTagFilter) SetValue(v string) {
	o.Value = v
}

func (o EqualsTagFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EqualsTagFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["scope"] = o.Scope
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *EqualsTagFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"scope",
		"operator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEqualsTagFilter := _EqualsTagFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEqualsTagFilter)

	if err != nil {
		return err
	}

	*o = EqualsTagFilter(varEqualsTagFilter)

	return err
}

type NullableEqualsTagFilter struct {
	value *EqualsTagFilter
	isSet bool
}

func (v NullableEqualsTagFilter) Get() *EqualsTagFilter {
	return v.value
}

func (v *NullableEqualsTagFilter) Set(val *EqualsTagFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualsTagFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualsTagFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualsTagFilter(val *EqualsTagFilter) *NullableEqualsTagFilter {
	return &NullableEqualsTagFilter{value: val, isSet: true}
}

func (v NullableEqualsTagFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualsTagFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


