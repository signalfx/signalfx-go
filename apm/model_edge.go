/*
APM service topology API

APIs to retrieve the upstream and downstream dependencies for a given service, as well as to retrieve the complete graph-based topology of all services in a given environment and time window. You can also use tagFilters to filter this topology by indexed span tags.  To learn about example use cases for this API, see [Retrieve service topology](https://dev.splunk.com/observability/docs/apm/service-topology/) in the developer guide.    ## Requirements  * You must have an organization access token with the API permission or a session token to use the API. * You have to have the Splunk Observability Cloud admin, power, or read_only role to use the APM Service Topology endpoints. 

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"encoding/json"
)

// checks if the Edge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Edge{}

// Edge Description of an interaction between two nodes in the topology, in the form of a JSON object 
type Edge struct {
	// Name of the node from which the edge starts; equivalent to the name of the service that's the origin of the operation 
	FromNode *string `json:"fromNode,omitempty"`
	// Name of the node at which the edge ends; equivalent to the name of the service that's the destination of the operation 
	ToNode *string `json:"toNode,omitempty"`
}

// NewEdge instantiates a new Edge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdge() *Edge {
	this := Edge{}
	return &this
}

// NewEdgeWithDefaults instantiates a new Edge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeWithDefaults() *Edge {
	this := Edge{}
	return &this
}

// GetFromNode returns the FromNode field value if set, zero value otherwise.
func (o *Edge) GetFromNode() string {
	if o == nil || IsNil(o.FromNode) {
		var ret string
		return ret
	}
	return *o.FromNode
}

// GetFromNodeOk returns a tuple with the FromNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Edge) GetFromNodeOk() (*string, bool) {
	if o == nil || IsNil(o.FromNode) {
		return nil, false
	}
	return o.FromNode, true
}

// HasFromNode returns a boolean if a field has been set.
func (o *Edge) HasFromNode() bool {
	if o != nil && !IsNil(o.FromNode) {
		return true
	}

	return false
}

// SetFromNode gets a reference to the given string and assigns it to the FromNode field.
func (o *Edge) SetFromNode(v string) {
	o.FromNode = &v
}

// GetToNode returns the ToNode field value if set, zero value otherwise.
func (o *Edge) GetToNode() string {
	if o == nil || IsNil(o.ToNode) {
		var ret string
		return ret
	}
	return *o.ToNode
}

// GetToNodeOk returns a tuple with the ToNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Edge) GetToNodeOk() (*string, bool) {
	if o == nil || IsNil(o.ToNode) {
		return nil, false
	}
	return o.ToNode, true
}

// HasToNode returns a boolean if a field has been set.
func (o *Edge) HasToNode() bool {
	if o != nil && !IsNil(o.ToNode) {
		return true
	}

	return false
}

// SetToNode gets a reference to the given string and assigns it to the ToNode field.
func (o *Edge) SetToNode(v string) {
	o.ToNode = &v
}

func (o Edge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Edge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromNode) {
		toSerialize["fromNode"] = o.FromNode
	}
	if !IsNil(o.ToNode) {
		toSerialize["toNode"] = o.ToNode
	}
	return toSerialize, nil
}

type NullableEdge struct {
	value *Edge
	isSet bool
}

func (v NullableEdge) Get() *Edge {
	return v.value
}

func (v *NullableEdge) Set(val *Edge) {
	v.value = val
	v.isSet = true
}

func (v NullableEdge) IsSet() bool {
	return v.isSet
}

func (v *NullableEdge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdge(val *Edge) *NullableEdge {
	return &NullableEdge{value: val, isSet: true}
}

func (v NullableEdge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


