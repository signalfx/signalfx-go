/*
APM service topology API

APIs to retrieve the upstream and downstream dependencies for a given service, as well as to retrieve the complete graph-based topology of all services in a given environment and time window. You can also use tagFilters to filter this topology by indexed span tags.  To learn about example use cases for this API, see [Retrieve service topology](https://dev.splunk.com/observability/docs/apm/service-topology/) in the developer guide.    ## Requirements  * You must have an organization access token with the API permission or a session token to use the API. * You have to have the Splunk Observability Cloud admin, power, or read_only role to use the APM Service Topology endpoints.

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apm

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RetrieveServiceTopologyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetrieveServiceTopologyRequest{}

// RetrieveServiceTopologyRequest struct for RetrieveServiceTopologyRequest
type RetrieveServiceTopologyRequest struct {
	// Time range boundary for matching service dependencies
	TimeRange string `json:"timeRange"`
	// List of `tagFilters` to include in the request.
	TagFilters []TagFiltersInner `json:"tagFilters,omitempty"`
}

type _RetrieveServiceTopologyRequest RetrieveServiceTopologyRequest

// NewRetrieveServiceTopologyRequest instantiates a new RetrieveServiceTopologyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveServiceTopologyRequest(startTime time.Time, endTime time.Time) *RetrieveServiceTopologyRequest {
	this := RetrieveServiceTopologyRequest{}
	this.TimeRange = fmt.Sprintf("%s/%s", startTime.Format(time.RFC850), endTime.Format(time.RFC3339))
	return &this
}

// NewRetrieveServiceTopologyRequestWithDefaults instantiates a new RetrieveServiceTopologyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveServiceTopologyRequestWithDefaults() *RetrieveServiceTopologyRequest {
	this := RetrieveServiceTopologyRequest{}
	return &this
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *RetrieveServiceTopologyRequest) GetTagFilters() []TagFiltersInner {
	if o == nil || IsNil(o.TagFilters) {
		var ret []TagFiltersInner
		return ret
	}
	return o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveServiceTopologyRequest) GetTagFiltersOk() ([]TagFiltersInner, bool) {
	if o == nil || IsNil(o.TagFilters) {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *RetrieveServiceTopologyRequest) HasTagFilters() bool {
	if o != nil && !IsNil(o.TagFilters) {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given []TagFiltersInner and assigns it to the TagFilters field.
func (o *RetrieveServiceTopologyRequest) SetTagFilters(v []TagFiltersInner) {
	o.TagFilters = v
}

func (o RetrieveServiceTopologyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetrieveServiceTopologyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timeRange"] = o.TimeRange
	if !IsNil(o.TagFilters) {
		toSerialize["tagFilters"] = o.TagFilters
	}
	return toSerialize, nil
}

func (o *RetrieveServiceTopologyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timeRange",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRetrieveServiceTopologyRequest := _RetrieveServiceTopologyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRetrieveServiceTopologyRequest)

	if err != nil {
		return err
	}

	*o = RetrieveServiceTopologyRequest(varRetrieveServiceTopologyRequest)

	return err
}

type NullableRetrieveServiceTopologyRequest struct {
	value *RetrieveServiceTopologyRequest
	isSet bool
}

func (v NullableRetrieveServiceTopologyRequest) Get() *RetrieveServiceTopologyRequest {
	return v.value
}

func (v *NullableRetrieveServiceTopologyRequest) Set(val *RetrieveServiceTopologyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveServiceTopologyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveServiceTopologyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveServiceTopologyRequest(val *RetrieveServiceTopologyRequest) *NullableRetrieveServiceTopologyRequest {
	return &NullableRetrieveServiceTopologyRequest{value: val, isSet: true}
}

func (v NullableRetrieveServiceTopologyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveServiceTopologyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
