/*
Automated Archival API

APIs to manipulate automated archival settings and exempt metrics

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package signalfx

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"

	"github.com/signalfx/signalfx-go/automated-archival"
)


const AutomatedArchivalApiURL = "/v2/automated-archival"

func (c *Client) GetSettings(ctx context.Context) (*automated_archival.AutomatedArchivalSettings, error) {
	resp, err := c.doRequest(ctx, http.MethodGet, AutomatedArchivalApiURL+"/settings", nil, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if err = newResponseError(resp, http.StatusOK); err != nil {
		return nil, err
	}

	settings := &automated_archival.AutomatedArchivalSettings{}
	err = json.NewDecoder(resp.Body).Decode(&settings)
	io.Copy(io.Discard, resp.Body)

	return settings, err
}

func (c *Client) CreateSettings(ctx context.Context, settings *automated_archival.AutomatedArchivalSettings) (*automated_archival.AutomatedArchivalSettings, error) {
	payload, err := json.Marshal(settings)
	if err != nil {
		return nil, err
	}

	resp, err := c.doRequest(ctx, http.MethodPost, AutomatedArchivalApiURL+"/settings", nil, bytes.NewReader(payload))
	if resp != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return nil, err
	}

	if err = newResponseError(resp, http.StatusOK); err != nil {
		return nil, err
	}

	createdSettings := &automated_archival.AutomatedArchivalSettings{}
	err = json.NewDecoder(resp.Body).Decode(&createdSettings)
	io.Copy(io.Discard, resp.Body)

	return createdSettings, err
}

func (c *Client) UpdateSettings(ctx context.Context, settings *automated_archival.AutomatedArchivalSettings) (*automated_archival.AutomatedArchivalSettings, error) {
	payload, err := json.Marshal(settings)
	if err != nil {
		return nil, err
	}

	resp, err := c.doRequest(ctx, http.MethodPut, AutomatedArchivalApiURL+"/settings", nil, bytes.NewReader(payload))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if err = newResponseError(resp, http.StatusOK); err != nil {
		return nil, err
	}

	updatedSettings := &automated_archival.AutomatedArchivalSettings{}
	err = json.NewDecoder(resp.Body).Decode(&updatedSettings)
	io.Copy(io.Discard, resp.Body)

	return updatedSettings, err
}

func (c *Client) DeleteSettings(ctx context.Context, deleteSettingsRequest *automated_archival.AutomatedArchivalSettingsDeleteRequest) error {
	payload, err := json.Marshal(deleteSettingsRequest)
	if err != nil {
		return err
	}

	resp, err := c.doRequest(ctx, http.MethodDelete, AutomatedArchivalApiURL+"/settings", nil, bytes.NewReader(payload))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if err = newResponseError(resp, http.StatusNoContent); err != nil {
		return err
	}

	io.Copy(io.Discard, resp.Body)

	return nil
}

func (c *Client) GetExemptMetrics(ctx context.Context) (*[]automated_archival.ExemptMetric, error) {
	resp, err := c.doRequest(ctx, http.MethodGet, AutomatedArchivalApiURL+"/exempt-metrics", nil, nil)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if err = newResponseError(resp, http.StatusOK); err != nil {
		return nil, err
	}

	exemptMetrics := &[]automated_archival.ExemptMetric{}
	err = json.NewDecoder(resp.Body).Decode(&exemptMetrics)
	io.Copy(io.Discard, resp.Body)

	return exemptMetrics, err
}

func (c *Client) CreateExemptMetrics(ctx context.Context, exemptMetrics *[]automated_archival.ExemptMetric) (*[]automated_archival.ExemptMetric, error) {
	payload, err := json.Marshal(exemptMetrics)
	if err != nil {
		return nil, err
	}

	resp, err := c.doRequest(ctx, http.MethodPost, AutomatedArchivalApiURL+"/exempt-metrics", nil, bytes.NewReader(payload))
	if resp != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return nil, err
	}

	if err = newResponseError(resp, http.StatusOK); err != nil {
		return nil, err
	}

	createdExemptMetrics := &[]automated_archival.ExemptMetric{}
	err = json.NewDecoder(resp.Body).Decode(&createdExemptMetrics)
	io.Copy(io.Discard, resp.Body)

	return createdExemptMetrics, err
}

func (c *Client) DeleteExemptMetrics(ctx context.Context, deleteExemptMetricsRequest *automated_archival.ExemptMetricDeleteRequest) error {
	payload, err := json.Marshal(deleteExemptMetricsRequest)
	if err != nil {
		return err
	}

	resp, err := c.doRequest(ctx, http.MethodDelete, AutomatedArchivalApiURL+"/exempt-metrics", nil, bytes.NewReader(payload))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if err = newResponseError(resp, http.StatusNoContent); err != nil {
		return err
	}

	io.Copy(io.Discard, resp.Body)

	return nil
}